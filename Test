
if game:GetService("CoreGui"):FindFirstChild("BlackTrap") then
    require(game:GetService("ReplicatedStorage").Framework.Modules.Client["5 | Message"]).New("Another menu is found. \n Please execute again.")
        for i = 0,5 do
            game:GetService("CoreGui")["BlackTrap"]:Destroy()
        end
elseif not game:GetService("CoreGui"):FindFirstChild("BlackTrap") then
    print("Starting.. All seems fine.")
end
--------------------------
require(game:GetService("ReplicatedStorage").Framework.Modules.Client["5 | Message"]).New("Press OK to Start BlackTrap Menu")

if game.PlaceId == 6284583030 then
    local start = tick()
    repeat task.wait() until game:isLoaded()
    repeat task.wait() until game:GetService("Players")
    repeat task.wait() until game:GetService("Players").LocalPlayer
    repeat task.wait() until game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    repeat task.wait() until game:GetService("Players").LocalPlayer.PlayerGui.Main.Enabled
    repeat task.wait() until game:GetService("Workspace"):FindFirstChild('__MAP')
end
-----------------------------------------
-- lib & service
local Blacklib = loadstring(game:HttpGet("https://raw.githubusercontent.com/Sky2836/Sanz/main/BlackTrap%20V.1.2.lua"))()
local Win = Blacklib:Window("Pet Simulator X")
-----------------------------------------
--Farming
local Main = Win:Tab("• Main", "rbxassetid://8825654232")
local Farm = Main:NewSection("Auto Farming")
local Chest = Main:NewSection("Auto Chest")
local SetFarm = Main:NewSection("Farming Setting's")
-----------------------------------------
-- Auto Egg
local Main_2 = Win:Tab("• Eggs", "rbxassetid://8825651806")
local Eggs = Main_2:NewSection("Auto Hatch Eggs")
local EggSet = Main_2:NewSection("Eggs Setting's")
-----------------------------------------
-- Pets
local Main_3 = Win:Tab("• Pets", "rbxassetid://8879573067")
local Pet1 = Main_3:NewSection("Enchant Pets")
local Pet2 = Main_3:NewSection("Golden/Rainbow Pets")
local Pet3 = Main_3:NewSection("Dark Matter Pets")
local Pet4 = Main_3:NewSection("Fuse Pets")
------------------------------------------
-- Misc
local Misc = Win:Tab("• Misscellaneous", "rbxassetid://8825656075")
local Remote = Misc:NewSection("Remote Function")
local Mods = Misc:NewSection("Mods Fake")
------------------------------------------
-- Setting'S
local Setting = Win:Tab("• Settings", "rbxassetid://8825671038")
local Config = Setting:NewSection("Config")
local Plyrs = Setting:NewSection("Player")
------------------------------------------
-- Changelog
local Changelog = Win:Tab("• Changelog", "rbxassetid://8825672676")
local Update = Changelog:NewSection("Changelog")
local Credit = Changelog:NewSection("Credit")
------------------------------------------
-----------------------------------------
local GC = getconnections or get_signal_cons
if GC then
    for i,v in pairs(GC(game.Players.LocalPlayer.Idled)) do
        if v["Disable"] then
            v["Disable"](v)
        elseif v["Disconnect"] then
            v["Disconnect"](v)
        end
    end
else
    print("Unlucky.")
    local vu = game:GetService("VirtualUser")
    game:GetService("Players").LocalPlayer.Idled:connect(function()
        vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
        wait(1)
        vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
    end)
end

-----------------------------------------
-----------------------------------------
-----------------------------------------

-- Main
local GameLibrary = require(game:GetService("ReplicatedStorage"):WaitForChild("Framework"):WaitForChild("Library"))
local Network = GameLibrary.Network
local Run_Service = game:GetService("RunService")
local rs = Run_Service.RenderStepped
local CurrencyOrder = {"Halloween Candy", "Gingerbread", "Rainbow Coins", "Tech Coins", "Fantasy Coins", "Coins", "Diamonds",}

local IMightKillMyselfCauseOfThis = {
    --Misc
    ['VIP'] = {'VIP'};
    --Spawn
    ['Town'] = {'Town', 'Town FRONT'}; ['Forest'] = {'Forest', 'Forest FRONT'}; ['Beach'] = {'Beach', 'Beach FRONT'}; ['Mine'] = {'Mine', 'Mine FRONT'}; ['Winter'] = {'Winter', 'Winter FRONT'}; ['Glacier'] = {'Glacier', 'Glacier Lake'}; ['Desert'] = {'Desert', 'Desert FRONT'}; ['Volcano'] = {'Volcano', 'Volcano FRONT'};
    -- Fantasy init
    ['Enchanted Forest'] = {'Enchanted Forest', 'Enchanted Forest FRONT'}; ['Ancient Island'] = {'Ancient Island'}; ['Samurai Island'] = {'Samurai Island', 'Samurai Island FRONT'}; ['Candy Island'] = {'Candy Island'}; ['Haunted Island'] = {'Haunted Island', 'Haunted Island FRONT'}; ['Hell Island'] = {'Hell Island'}; ['Heaven Island'] = {'Heaven Island'};
    -- Tech
    ['Ice Tech'] = {'Ice Tech'}; ['Tech City'] = {'Tech City'; 'Tech City FRONT'}; ['Dark Tech'] = {'Dark Tech'; 'Dark Tech FRONT'}; ['Steampunk'] = {'Steampunk'; 'Steampunk FRONT'}, ['Alien Forest'] = {"Alien Forest"; "Alien Forest FRONT"}, ['Alien Lab'] = {"Alien lab"; "Alien Lab FRONT"}; ['Glitch'] = {"Glitch"; "Glitch FRONT"}; ['Hacker Portal'] = {"Hacker Portal"; "Hacker Portal FRONT"};
    -- Axolotls
    ['Axolotl Ocean'] = {"Axolotl Ocean"; "Axolotl Ocean FRONT"}; ['Axolotl Deep Ocean'] = {"Axolotl Deep Ocean"; "Axolotl Deep Ocean FRONT"}; ['Axolotl Cave'] = {"Axolotl Cave"; "Axolotl Cave FRONT"};
}

local AreaList = { --These match the IMightKillMyselfCuaseOfThis table
    'All'; 'VIP';
    '-- Spawn --';
    'Town'; 'Forest'; 'Beach'; 'Mine'; 'Winter'; 'Glacier'; 'Desert'; 'Volcano';
    '-- Fantasy --';
    'Enchanted Forest'; 'Ancient Island'; 'Samurai Island'; 'Candy Island'; 'Haunted Island'; 'Hell Island'; 'Heaven Island';
    '-- Tech --';
    'Ice Tech'; 'Tech City'; 'Dark Tech'; 'Steampunk'; 'Alien Lab'; 'Alien Forest'; 'Glitch'; 'Hacker Portal';
    '-- Axolotls --';
    'Axolotl Ocean'; 'Axolotl Deep Ocean'; 'Axolotl Cave';
}

local Chests = {
    "All";
    '-- Spawn --';
    "Volcano Magma Chest";
    '-- Fantasy --';
    "Enchanted Forest Chest"; "Ancient Island Enchanted Chest"; "Haunted Island Haunted Chest"; "Hell Island Hell Chest"; "Heaven Island Angel Chest"; "Heavens Gate Grand Heaven Chest";
    '-- Tech --',
    "Giant Tech Chest"; "Giant Steampunk Chest"; "Giant Alien Chest"; "Giant Hacker Chest";
    '-- Axolotls --';
    "Giant Ocean Chest";
    '-- Others --';
    "Giant Pumpkin"; "Giant Present"; "Candy Canes"; "Gingerbread Chest"; "Diamonds"; "Tiny Diamonds";
}

-----------------------------------------

workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "buy egg")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "join coin")
workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "farm coin")
workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "claim orbs")
workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "change pet target")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "get trade")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "add trade pet")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "remove trade pet")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "convert to dark matter")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "redeem dark matter pet")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "redeem rank rewards")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "redeem vip rewards")
workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "toggle setting")
workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "activate boost")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "use golden machine")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "use rainbow machine")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "use fuse pets machine")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "fuse pets")

-----------------------------------------

function AllChests()
    local returntable = {}
    local ListCoins = game.workspace['__THINGS']['__REMOTES']["get coins"]:InvokeServer({})[1]
    for i,v in pairs(ListCoins) do
        local shit = v
        shit["index"] = i
        for aa,bb in pairs(Chests) do
            if string.find(v.n, bb) then
                local thing = string.gsub(v.n, bb.." ", "")
                if table.find(Chests, thing) then
                    shit.n = thing
                    table.insert(returntable, shit)
                end
            end
        end
    end
    return returntable
end

function FarmCoin(CoinID, PetID)
    game.workspace['__THINGS']['__REMOTES']["join coin"]:InvokeServer({[1] = CoinID, [2] = {[1] = PetID}})
    game.workspace['__THINGS']['__REMOTES']["farm coin"]:FireServer({[1] = CoinID, [2] = PetID})
end

local Library = require(game:GetService("ReplicatedStorage").Framework.Library)
local IDToName = {}
local NameToID = {}
for i,v in pairs(Library.Directory.Pets) do
    IDToName[i] = v.name
    NameToID[v.name] = i
end

function GetMyPets()
   local returntable = {}
   for i,v in pairs(GameLibrary.Save.Get().Pets) do
       if v.e then 
           table.insert(returntable, v.uid)
       end
   end
   return returntable
end

function GetPets()
    local MyPets = {}
    for i,v in pairs(GameLibrary.Save.Get().Pets) do
        --if (not _G.AllowMythicals) or (_G.AllowMythicals and (PettoRarity[v.id] ~= 'Mythical' and PettoRarity[v.id] ~= 'Exclusive' and not string.find(IDToName[v.id]:lower(), "maskot"))) then
        local ThingyThingyTempTypeThing = (v.g and 'Gold') or (v.r and 'Rainbow') or (v.dm and 'Dark Matter') or 'Normal'
        local TempString = ThingyThingyTempTypeThing .. IDToName[v.id]
        if MyPets[TempString] then
            table.insert(MyPets[TempString], v.uid)
            else
                MyPets[TempString] = {}
                table.insert(MyPets[TempString], v.uid)
        end
        --end
    end
    return MyPets
end

function GetCoinsNormal(area)
    local returntable = {}
    local ListCoins = game.workspace['__THINGS']['__REMOTES']["get coins"]:InvokeServer({})[1]
    for i,v in pairs(ListCoins) do
        if string.lower(v.a) == string.lower(area) then
            table.insert(returntable, i)
        end
    end
    return returntable
end

function GetCoins(area, exclude)
    exclude = exclude or {}
    local Areas = (IMightKillMyselfCauseOfThis)
    local returntable = {}
    local ListCoins = game.workspace['__THINGS']['__REMOTES']["get coins"]:InvokeServer({})[1]
    for i,v in pairs(ListCoins) do
        if _G.AreaFarm == "All" or table.find(Areas[_G.AreaFarm], v.a) and not table.find(exclude ,v.n) then
            local shit = v
            shit["index"] = i
            table.insert(returntable, shit)
         end
    end
    return returntable
end

function GetCoinTable(area, Type, exclude)
    exclude = exclude or {}
    local CoinTable = GetCoins(area, exclude)
    local function getKeysSortedByValue(tbl, sortFunction)
        local keys = {}
        for key in pairs(tbl) do
            table.insert(keys, key)
        end
        table.sort(keys, function(a, b)
            return sortFunction(tbl[a].h, tbl[b].h)
        end)
        return keys
    end
    local sortedKeys
    if Type == 'Highest' then
        sortedKeys = getKeysSortedByValue(CoinTable, function(a, b) return a > b end)
    elseif Type == 'Lowest' then
        sortedKeys = getKeysSortedByValue(CoinTable, function(a, b) return a < b end)
    end
    local newCoinTable = {}
    for i,v in pairs(sortedKeys) do
        table.insert(newCoinTable, CoinTable[v])
    end
    return newCoinTable
end

if _G.MyConnection then
    _G.MyConnection:Disconnect()
end
_G.MyConnection = game.Workspace.__THINGS.Orbs.ChildAdded:Connect(function(Orb)
    game.Workspace.__THINGS.__REMOTES["claim orbs"]:FireServer({{Orb.Name}})
end)

Farm:Dropdown("Area List", AreaList, function(areafunc)
    _G.AreaFarm = areafunc
end)

Farm:Toggle("Multi Target Type_1", function(multifunc)
    _G.MultiTarget = multifunc
    local CurrentFarmingPets = {}
    while _G.MultiTarget do
        local pethingy = GetMyPets()
        local cointhiny = GetCoins(_G.AreaFarm)
        for i = 1, #cointhiny do
            if i%#pethingy == #pethingy-1 then wait() end
            if not CurrentFarmingPets[pethingy[i%#pethingy+1]] or CurrentFarmingPets[pethingy[i%#pethingy+1]] == nil then
                spawn(function()
                    CurrentFarmingPets[pethingy[i%#pethingy+1]] = 'Farming'
                    FarmCoin(cointhiny[i].index, pethingy[i%#pethingy+1])
                    repeat rs:wait() until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index) or #game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index).Pets:GetChildren() == 0
                    CurrentFarmingPets[pethingy[i%#pethingy+1]] = nil
                end)
            end
        end
    end
end)

Farm:Toggle("Multi Target Type_2", function(multifunc2)
    _G.MultiTarget2 = multifunc2
    local CurrentFarmingPets = {}
    while _G.MultiTarget2 do
        local pethingy = GetMyPets()
        local cointhiny = GetCoinsNormal(_G.AreaFarm)
        for i = 1+1, #cointhiny do
            spawn(function()
                CurrentFarmingPets[pethingy[i%#pethingy+1+1]] = 'Farming'
                FarmCoin(cointhiny[i], pethingy[i%#pethingy+1+1])
                repeat rs:wait() until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i]) or #game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i]).Pets:GetChildren() == 0
                CurrentFarmingPets[pethingy[i%#pethingy+1+1]] = nil
            end)
        end
    end
end)

Farm:Toggle("Multi Target Type_3 (Rec. fot OP Pets)", function(multifunc3)
    _G.MultiTarget3 = multifunc3
    while _G.MultiTarget3 do
        local pethingy = GetMyPets()
        local cointhiny = GetCoinsNormal(_G.AreaFarm)
        for i = 1, #cointhiny do
            pcall(function() FarmCoin(cointhiny[i], pethingy[i%#pethingy+1]) end)
        end
    end
end)

Farm:Toggle("Low Value (Priority)", function(lowvaluefunc)
    _G.LowVal = lowvaluefunc
    local CurrentFarmingPets = {}
    while _G.LowVal do
        local pethingy = GetMyPets()
        local cointhiny = GetCoinTable(_G.AreaFarm, 'Lowest')
        for i = 1, (#cointhiny >= #pethingy and #pethingy or #cointhiny) do
            if not CurrentFarmingPets[pethingy[i%#pethingy+1]] or CurrentFarmingPets[pethingy[i%#pethingy+1]] == nil then
                coroutine.wrap(function()
                    CurrentFarmingPets[pethingy[i%#pethingy+1]] = 'Farming'
                    FarmCoin(cointhiny[i].index, pethingy[i%#pethingy+1])
                    repeat task.wait(0.0001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index) or #game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index).Pets:GetChildren() == 0 or not _G.LowVal
                    CurrentFarmingPets[pethingy[i%#pethingy+1]] = nil
                end)()
            end
        end
    end
end)

Farm:Toggle("High Value (Priority)", function(highvaluefunc)
    _G.HighVal = highvaluefunc
    local CurrentFarmingPets = {}
    while _G.HighVal do
        local pethingy = GetMyPets()
        local cointhiny = GetCoinTable(_G.AreaFarm, 'Highest')
        if #cointhiny >= 3 then
            local CurrentFarmingPets = {}
            for a = 1, 3 do
                coroutine.wrap(function()
                    if CurrentFarmingPets[a] == nil then
                        for petnum = a, #pethingy, 3 do
                            coroutine.wrap(function()
                                if not CurrentFarmingPets[a] then CurrentFarmingPets[a] = {} end
                                    if CurrentFarmingPets[a] ~= nil and game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[a].index) and not table.find(CurrentFarmingPets[a], pethingy[petnum]) then
                                       table.insert(CurrentFarmingPets[a], pethingy[petnum])
                                       FarmCoin(cointhiny[a].index, pethingy[petnum]) 
                                    end
                            end)()
                        end
                        repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[a].index) or #game:GetService("Workspace")["__THINGS"].Coins[cointhiny[a].index].Pets:GetChildren() == 0  or not _G.HighVal
                            CurrentFarmingPets[a] = nil
                    end
                end)()
            end
            else
                task.wait()
        end
    end
end)

Farm:Toggle("Normal", function(normalfynx)
    _G.FarmNorm = normalfynx
    local CurrentFarmingPets = {}
    while _G.FarmNorm do
        local pethingy = GetMyPets ()
        local cointhiny = GetCoins(_G.AreaFarm)
        for i = 1, #cointhiny do
            if _G.FarmNorm and game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index) then
                for _, bb in pairs(pethingy) do
                    coroutine.wrap(function()
                        FarmCoin(cointhiny[i].index, bb)
                    end)()
                end
                repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index) or not _G.FarmNorm
            end
        end
    end
end)

Farm:Toggle("Nearest", function(nearfync)
    _G.NearestF = nearfync
    local CurrentFarmingPets = {}
    while _G.NearestF do
        local pethingy = GetMyPets()
        local cointhiny = nil
        local cointable = game:GetService("Workspace")["__THINGS"].Coins:GetChildren()
        table.sort(cointable, function(i, v)
            return (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - i.POS.Position).magnitude < (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.POS.Position).magnitude
        end)
        local NearestOne = cointable[1]
        if NearestOne ~= nil then
            for a,b in pairs(pethingy) do
                coroutine.wrap(function()
                    if NearestOne ~= nil then
                        FarmCoin(NearestOne.Name, b)
                    end
                end)()
            end
            repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(NearestOne.Name) or #game:GetService("Workspace")["__THINGS"].Coins[NearestOne.Name].Pets:GetChildren() == 0
                else
                    task.wait()
        end
    end
end)

-----------------------------------------

Chest:Dropdown("Chest List", Chests, function(chestlistfunc)
    _G.ListChest = chestlistfunc
end)

Chest:Toggle("Enabled Chest Farm", function(chestfunc)
    _G.ChestFarm = chestfunc
   local CurrentFarmingPets = {}
    while _G.ChestFarm do
        local pethingy = GetMyPets()
        local cointhiny = nil
        for i,v in pairs(AllChests()) do
            if (v.n == _G.ListChest) or (_G.ListChest == 'All') then
                local starttick = tick()
                for a, b in pairs(pethingy) do
                    coroutine.wrap(function()
                        FarmCoin(v.index, b)
                    end)()
                end
                repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(v.index) or #game:GetService("Workspace")["__THINGS"].Coins[v.index].Pets:GetChildren() == 0 or not _G.ChestFarm
                        --warn(v.n .. " has been broken in", tick()-starttick)
            end
        end
    end
end)

-----------------------------------------

SetFarm:Toggle("Lootbag", function(lootbagfunc)
    _G.Lootbag = lootbagfunc
    local Running = {}
    while wait() and _G.Lootbag do
        for i, v in pairs(game:GetService("Workspace")["__THINGS"].Lootbags:GetChildren()) do
            spawn(function()
                if v ~= nil and v.ClassName == 'MeshPart' then
                    if not Running[v.Name] then
                        Running[v.Name] = true
                        local StartTick = tick()
                        v.Material = "SmoothPlastic"
                        v.Transparency = 1
                        v.Reflectance = 0
                        for i2,v2 in pairs(v:GetChildren()) do
                            if not string.find(v2.Name, "Body") then
                                v2:Destroy()
                            end
                        end
                        repeat task.wait()
                            v.CFrame = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame
                        until v == nil or not v.Parent or tick() > StartTick + 1
                        Running[v.Name] = nil
                    end
                end
            end)
        end
    end
end)

SetFarm:Toggle("Auto Activated Triple Damage", function(autotripledamage)
    if autotripledamage == true then
        _G.TripleDamage1 = true
    elseif autotripledamage == false or destroygui then
        _G.TripleDamage1 = false
        end
    while wait(5) do
        if _G.TripleDamage1 then 
            if not game:GetService("Players").LocalPlayer.PlayerGui.Main.Boosts:FindFirstChild("Triple Damage") then
                workspace.__THINGS.__REMOTES["activate boost"]:FireServer({[1] = "Triple Damage"})
                print("Triple damage boost checked")
            end
        end
    end
end)
SetFarm:Toggle("Auto Activated Triple Coins", function(autotriplecoins)
    if autotriplecoins == true then
        _G.TripleCoins1 = true
    elseif autotriplecoins == false or destroygui then
        _G.TripleCoins1 = false
    end
    while wait(5) do
        if _G.TripleCoins1 then
            if not game:GetService("Players").LocalPlayer.PlayerGui.Main.Boosts:FindFirstChild("Triple Coins") then
                workspace.__THINGS.__REMOTES["activate boost"]:FireServer({[1] = "Triple Coins"})
            print("Triple coin boost checked")
            end
        end
    end
end)
SetFarm:Toggle("Disable Coin HUD", function(refunc)
    _G.Hud = refunc
    while wait() do
        if _G.Hud then
            game:GetService("Players").LocalPlayer.PlayerScripts.Scripts.GUIs["Coin Rewards HUD"].Disabled = true
        elseif not _G.Hud then
            game:GetService("Players").LocalPlayer.PlayerScripts.Scripts.GUIs["Coin Rewards HUD"].Disabled = false
        end
    end
end)
SetFarm:Toggle("Lag Reduced", function()
    local a = game:GetService("Workspace")["__DEBRIS"]
    local b = a:Clone()
    b.Parent = a.Parent
    a:Destroy()
    for _,v in pairs(b:GetChildren()) do
        if v.Name == 'RewardBillboard' then
            v:Destroy()
        end
    end
end)

-----------------------------------------
-----------------------------------------

local EggData = {}
for i,v in next, game.ReplicatedStorage.Game.Eggs:GetChildren() do
    for i2,v2 in next, v:GetChildren() do
        if v2 then
            table.insert(EggData, v2.Name)
        end
    end
end

Eggs:Dropdown("Select Eggs", EggData, function(listeggfunc)
    _G.EggList = listeggfunc
end)

Eggs:Toggle("Triple Eggs (if have Gamepassed)", function(tripleeggfunc)
    _G.TripleEggs = tripleeggfunc
end)

Eggs:Toggle("Enable Open Eggs", function(eggfunc)
    _G.OpenEgg = eggfunc
    while _G.OpenEgg do
        local Table1 = {
            [1] = _G.EggList,
            [2] = _G.TripleEggs
        }
        Workspace.__THINGS.__REMOTES["buy egg"]:InvokeServer(Table1)
    end
end)

-----------------------------------------

EggSet:Toggle("Disable Hatch Animation", function(petanim)
    _G.PetAnima = petanim
    while wait() do
        if _G.PetAnima then
            game:GetService("Players").LocalPlayer.PlayerScripts.Scripts.Game["Open Eggs"].Disabled = true
        elseif not _G.PetAnima then
            game:GetService("Players").LocalPlayer.PlayerScripts.Scripts.Game["Open Eggs"].Disabled = false
        end
    end
end)

EggSet:Toggle("Auto Activated Super Lucky", function(superluckyfunc)
    if superluckyfunc == true then
        _G.SuperLucky = true
    elseif superluckyfunc == false or destroygui then
        _G.SuperLucky = false
    end
    while wait(5) do
        if _G.SuperLucky then
            if not game:GetService("Players").LocalPlayer.PlayerGui.Main.Boosts:FindFirstChild("Super Lucky") then
                workspace.__THINGS.__REMOTES["activate boost"]:FireServer({[1] = "Super Lucky"})
                print("Super Lucky boost checked")
            end
        end
    end
end)

EggSet:Toggle("Auto Activated Ultra Lucky", function(ultraluckyfunc)
    if ultraluckyfunc == true then
        _G.UltraLucky = true
    elseif ultraluckyfunc == false or destroygui then
        _G.UltraLucky = false
    end
    while wait(5) do
        if _G.UltraLucky then
            if not game:GetService("Players").LocalPlayer.PlayerGui.Main.Boosts:FindFirstChild("Ultra Lucky") then
                workspace.__THINGS.__REMOTES["activate boost"]:FireServer({[1] = "Ultra Lucky"})
                print("ULTRA Lucky boost checked")
            end
        end
    end
end)

-----------------------------------------
-----------------------------------------
--init Pets
local GameLibrary = require(game:GetService("ReplicatedStorage"):WaitForChild("Framework"):WaitForChild("Library"))
local IDToName = {}
local NameToID = {}
local PettoRarity = {}
local RarityTable = {}
local PetNamesTable = {}
local PetNamesTable = {}
for i,v in pairs(GameLibrary.Directory.Pets) do
    IDToName[i] = v.name
    NameToID[v.name] = i
    PettoRarity[i] = v.rarity
    if not table.find(RarityTable, v.rarity) then
        table.insert(RarityTable, v.rarity)
    end
    table.insert(PetNamesTable, v.name)
end

local Library = require(game:GetService("ReplicatedStorage").Framework.Library)
local PettoRarity = {}
local a = require(game:GetService("ReplicatedStorage").Framework.Modules["1 | Directory"].Pets["Grab All Pets"])
for i, v in pairs(a) do
    PettoRarity[i] = v.rarity
end

function GetPetTable(PetUID)
    local Library = require(game:GetService("ReplicatedStorage").Framework.Library)
    for i, v in pairs(Library.Save.Get().Pets) do
        if v.uid == PetUID then
            return v
        end
    end
end

workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "enchant pet")
-----------------------------------------
--Enchant pets
local EnchantsList = {
    'Magnet',
    'Royalty',
    'Glittering',
    'Tech Coins',
    'Fantasy Coins',
    'Rainbow Coins',
    'Coins',
    'Teamwork',
    'Diamonds',
    'Strength',
    'Chests',
    'Presents',
    'Agility',
    'Charm'
}
Pet1:Dropdown("Enchant Type", EnchantsList, function(selectenchantfunc)
    if selectenchantfunc then
        _G.SelEnchant1 = selectenchantfunc
    end
    print("Select Enchant Type: ", _G.SelEnchant1)
end)
local EnchantLevel = {1, 2, 3, 4, 5}
Pet1:Dropdown("Enchant Level", EnchantLevel, function(selectnumlevel)
    if selectnumlevel then
        _G.SelLevel1 = selectnumlevel
    end
    print("Select Enchant Level: ", _G.SelLevel1)
end)
Pet1:Toggle("Start Auto Enchant", function(enfync)
    _G.StartEnchant = enfync
    local Wanted = {
        [_G.SelEnchant1] = _G.SelLevel1 or 1;
    }
    while wait() and _G.StartEnchant do
        for i, v in pairs(Library.Save.Get().Pets) do
            if v.e and PettoRarity[v.id] ~= 'Mythical' and _G.StartEnchant then
                local haspower = false
                repeat
                    if GetPetTable(v.uid).powers then
                        for i2, v2 in pairs(GetPetTable(v.uid).powers) do
                            warn(v2[1], v2[2])
                            print(Wanted[v2[1]])
                            if Wanted[v2[1]] ~= nil and not haspower then
                                if Wanted[v2[1]] <= v2[2] then
                                    haspower = true
                                    warn("Pet", v.uid, "has", v2[1], v2[2])
                                end
                            end
                        end
                        if not haspower then
                            print("Yea we kinda need new enchantments on", v.uid)
                            workspace.__THINGS.__REMOTES["enchant pet"]:InvokeServer({[1] = v.uid})
                        end
                    else
                        warn("taking", v.uid,'\'s enchanting virginity lol')
                        workspace.__THINGS.__REMOTES["enchant pet"]:InvokeServer({[1] = v.uid})
                    end
                until haspower == true or Library.Save.Get().Diamonds < 10000 or _G.StartEnchant == false
            end
        end
    end
end)
-----------------------------------------
-- Golden/Rainbow Pets
Pet2:Slider("Value Amount Pets", 0, 6, 3, function(countcombinefunc)
    if countcombinefunc then
        _G.CountCombineFunc1 = countcombinefunc
    end
end)
Pet2:Toggle("Make Golden Pets", function(togglegoldfunc)
    if togglegoldfunc == true then
        _G.ToggleGold = true
    elseif togglegoldfunc == false then
        _G.ToggleGold = false
    end
    while wait() and _G.ToggleGold do
        for i, v in pairs(GetPets()) do
            if #v >= _G.CountCombineFunc1 and _G.ToggleGold then
                if string.find(i, "Normal") and _G.ToggleGold then
                    local Args = {}
                    for eeeee = 1, _G.CountCombineFunc1 do
                        Args[#Args+1] = v[#Args+1]
                    end
                    Library.Network.Invoke("use golden machine", Args)
                end
            end
        end
    end
end)
Pet2:Toggle("Make Rainbow Pets", function(toggleraibowfunc)
    if toggleraibowfunc == true then
        _G.ToggleRainbow = true
    elseif toggleraibowfunc == false then
        _G.ToggleRainbow = false
    end
    while wait() and _G.ToggleRainbow do
        for i, v in pairs(GetPets()) do
            if #v >= _G.CountCombineFunc1 and _G.ToggleRainbow then
                if string.find(i, "Gold") and _G.ToggleRainbow then
                    local Args = {}
                    for eeeee = 1, _G.CountCombineFunc1 do
                        Args[#Args+1] = v[#Args+1]
                    end
                    Library.Network.Invoke("use rainbow machine", Args)
                end
            end
        end
    end
end)
-----------------------------------------
-- Dark Matter Pets
Pet3:Dropdown("Select Pets", PetNamesTable, function(value)
    _G.NameOfPet = value
end)
Pet3:Slider("Value Amount Pets", 0, 6, 3, function(countdarkmatterfunc)
    if countdarkmatterfunc then
        _G.CountDarkMatterFunc1 = countdarkmatterfunc
    end
end)
Pet3:Toggle("Enable Automated Dark Matter", function(automakedarkmatters)
    if automakedarkmatters == true then
        _G.AutoMakeDarkMatter = true
    elseif automakedarkmatters == false then
        _G.AutoMakeDarkMatter = false
    end
    while task.wait() and _G.AutoMakeDarkMatter do
        local Save = GameLibrary.Save.Get()
        local Slots = Save.DarkMatterSlots
        local Queued = 0
        for a, b in pairs(Save.DarkMatterQueue) do
            Queued = Queued + 1 
        end
        local Slots = Slots - Queued
        for count = 1, Slots do
            if Slots - count >= 0 then
                local PetList = {}
                for i,v in pairs(GameLibrary.Save.Get().Pets) do
                    if #PetList < _G.CountDarkMatterFunc1 and v.r and IDToName[v.id] == _G.NameOfPet then
                        table.insert(PetList, v.uid)
                    end
                end
                if #PetList >= _G.CountDarkMatterFunc1 then
                    local tablething = {[1] = {}}
                    for eeek = 1, _G.CountDarkMatterFunc1 do
                        tablething[1][eeek] = PetList[eeek]
                    end
                    workspace.__THINGS.__REMOTES["convert to dark matter"]:InvokeServer(tablething)
                end
            end 
        end
        task.wait(15)
    end
end)
Pet3:Toggle("Auto Claim Dark Matters", function(autoclaimdark)
    if autoclaimdark == true then
        _G.AutoClaimDarkMatter = true
    elseif autoclaimdark == false then
        _G.AutoClaimDarkMatter = false
    end
    spawn(function()
        while task.wait() and _G.AutoClaimDarkMatter do
            for i,v in pairs(GameLibrary.Save.Get().DarkMatterQueue) do
                if math.floor(v.readyTime - os.time()) < 0 then
                    workspace.__THINGS.__REMOTES["redeem dark matter pet"]:InvokeServer({[1] = i})
                end
            end
            task.wait(15)
        end
    end)
end)
Pet3:Button("Check Time Remaining", function()
    local PetList = {}
    for i,v in pairs(GameLibrary.Directory.Pets) do
        PetList[i] = v.name
    end

    local returnstring = ""
    for i,v in pairs(GameLibrary.Save.Get().DarkMatterQueue) do
        local timeleft = 'Ready.'
        if math.floor(v.readyTime - os.time()) > 0 then
            timeleft = SecondsToClock(math.floor(v.readyTime - os.time()))
        end
        local stringthing = PetList[v.petId] .." going to be ready in: ".. timeleft
        returnstring = returnstring .. stringthing .. "\n"
    end
    require(game:GetService("ReplicatedStorage").Framework.Modules.Client["5 | Message"]).New(returnstring)
end)
-----------------------------------------
-- Fuse
Pet4:Dropdown("Select pet", PetNamesTable, function(petfunc)
    if petfunc then
        _G.SelectedPet = petfunc
        _G.FuseList = {
            {
                [_G.SelectedPet] = _G.PetCount or 3;
            };
        }
    end
    print("Selected pet: ",  _G.SelectedPet)
end)
------------------------------------------
local TypeList = {'Normal', 'Gold', 'Rainbow'}
Pet4:Dropdown("Select pet type", TypeList, function(typefunc)
if typefunc then
    _G.Type = typefunc
end
print("Selected type: ", _G.Type)
end)
------------------------------------------
Pet4:Slider("Select pet amount", 0, 12, 3, function(countfusefunc)
if countfusefunc then
    _G.PetCount = countfusefunc
    _G.FuseList = {
        {
            [_G.SelectedPet] = _G.PetCount or 3;
        };
    }end
--print("Selected Count: ", _G.PetCount)
end)
------------------------------------------
Pet4:Toggle("Enable automated fuse", function(autofusefunc)
if autofusefunc == true then
    _G.Enabled = true
    print("_G.Enabled: ", _G.Enabled)
    print("Selected count: ", _G.PetCount)
    print("Selected type: ", _G.Type)
    print("Selected pet: ", _G.SelectedPet)
    loadstring(game:HttpGet('https://raw.githubusercontent.com/inceldom/skid/main/fuzefart.lua'))() -- runs script as I use while wait and _G.enabled so loop ends when _G.enabled is false
elseif autofusefunc == false then
    _G.Enabled = false
    print("_G.Enabled: ", _G.Enabled)
end
--Set globals so script doesn't error--
_G.Enabled = false
_G.Type = "Rainbow"
_G.FuseList = {{}}
end)
-----------------------------------------
-----------------------------------------
--Misc
Remote:Toggle("Auto Claim VIP/Ranks Reward", function(autorewards)
    if autorewards == true then
        _G.AutoRewards1 = true
    elseif autorewards == false then
        _G.AutoRewards1 = false
    end
    while task.wait() and _G.AutoRewards1 do
	    workspace.__THINGS.__REMOTES["redeem vip rewards"]:InvokeServer({})
	    workspace.__THINGS.__REMOTES["redeem rank rewards"]:InvokeServer({})
    end
end)

Remote:Toggle("Bank Storage", function(bankfunc)
    _G.Bankers = bankfunc
    while wait() do
        if _G.Bankers then
            game:GetService("Players").LocalPlayer.PlayerGui.Bank.Enabled = true
        elseif not _G.Bankers then
            game:GetService("Players").LocalPlayer.PlayerGui.Bank.Enabled = false
        end
    end
end)
Remote:Toggle("Merchant", function(meres)
    _G.Merchant = meres
    while wait() do
        if _G.Merchant then
            game:GetService("Players").LocalPlayer.PlayerGui.Merchant.Enabled = true
        elseif not _G.Merchant then
            game:GetService("Players").LocalPlayer.PlayerGui.Merchant.Enabled = false
        end
    end
end)
Remote:Toggle("Pet Collection", function(colfunc)
    _G.Collection = colfunc
    while wait() do
        if _G.Collection then
            game:GetService("Players").LocalPlayer.PlayerGui.Collection.Enabled = true
        elseif not _G.Collection then
            game:GetService("Players").LocalPlayer.PlayerGui.Collection.Enabled = false
        end
    end
end)
Remote:Toggle("Fuse Machine", function(fumac)
    _G.Fumach = fumac
    while wait() do
        if _G.Fumach then
            game:GetService("Players").LocalPlayer.PlayerGui.FusePets.Enabled = true
        elseif not _G.Fumach then
            game:GetService("Players").LocalPlayer.PlayerGui.FusePets.Enabled = false
        end
    end
end)
Remote:Toggle("Golden Machine", function(gogo)
    _G.Gon = gogo
    while wait() do
        if _G.Gon then
            game:GetService("Players").LocalPlayer.PlayerGui.Golden.Enabled = true
        elseif not _G.Gon then
            game:GetService("Players").LocalPlayer.PlayerGui.Golden.Enabled = false
        end
    end
end)
Remote:Toggle("Rainbow Machine", function(roro)
    _G.Rod = roro
    while wait() do
        if _G.Rod then
            game:GetService("Players").LocalPlayer.PlayerGui.Rainbow.Enabled = true
        elseif not _G.Rod then
            game:GetService("Players").LocalPlayer.PlayerGui.Rainbow.Enabled = false
        end
    end
end)
Remote:Toggle("Dark Matter Machine", function(dodi)
    _G.Dra = dodi
    while wait() do
        if _G.Dra then
            game:GetService("Players").LocalPlayer.PlayerGui.DarkMatter.Enabled = true
        elseif not _G.Dra then
            game:GetService("Players").LocalPlayer.PlayerGui.DarkMatter.Enabled = false
        end
    end
end)
Remote:Toggle("Enchant Machine", function(notd)
    _G.Em = notd
    while wait() do
        if _G.Em then
            game:GetService("Players").LocalPlayer.PlayerGui.EnchantPets.Enabled = true
        elseif not _G.Em then
            game:GetService("Players").LocalPlayer.PlayerGui.EnchantPets.Enabled = false
        end
    end
end)

-----------------------------------------
local HoverboardsList = {"Original", "VIP", "Sleigh", "Flame", "Rainbow", "Cat", "Bling", "Blue Flying Carpet", "Red Flying Carpet"}
Mods:Dropdown("Hoverboards Skin", HoverboardsList, function(hoverfunc)
    _G.Hovers = hoverfunc
end)
spawn(function()
    while wait() do
        if _G.Hovers == 'Original' then
            for i,v in pairs(game:GetService("ReplicatedStorage").Game.Hoverboards.Original:GetChildren()) do
                if v.Name == 'Hoverboard' then
                    v.MeshId = "rbxassetid://6356575802"
                    v.TextureID = "rbxassetid://3694028041"
                end
            end
        elseif _G.Hovers == 'VIP' then
            for i,v in pairs(game:GetService("ReplicatedStorage").Game.Hoverboards.Original:GetChildren()) do
                if v.Name == 'Hoverboard' then
                    v.MeshId = "rbxassetid://6356575832"
                    v.TextureID = "rbxassetid://3694028041"
                end
            end
        elseif _G.Hovers == 'Sleigh' then
            for i,v in pairs(game:GetService("ReplicatedStorage").Game.Hoverboards.Original:GetChildren()) do
                if v.Name == 'Hoverboard' then
                    v.MeshId = "rbxassetid://7861836930"
                    v.TextureID = "rbxassetid://7861836643"
                end
            end
        elseif _G.Hovers == 'Flame' then
            for i,v in pairs(game:GetService("ReplicatedStorage").Game.Hoverboards.Original:GetChildren()) do
                if v.Name == 'Hoverboard' then
                    v.MeshId = "rbxassetid://7859796249"
                    v.TextureID = "rbxassetid://7859796167"
                end
            end
        elseif _G.Hovers == 'Rainbow' then
            for i,v in pairs(game:GetService("ReplicatedStorage").Game.Hoverboards.Original:GetChildren()) do
                if v.Name == 'Hoverboard' then
                    v.MeshId = "rbxassetid://7861841212"
                    v.TextureID = "rbxassetid://7861840985"
                end
            end
        elseif _G.Hovers == 'Cat' then
            for i,v in pairs(game:GetService("ReplicatedStorage").Game.Hoverboards.Original:GetChildren()) do
                if v.Name == 'Hoverboard' then
                    v.MeshId = "rbxassetid://7861852552"
                    v.TextureID = "rbxassetid://7861852343"
                end
            end
        elseif _G.Hovers == 'Bling' then
            for i,v in pairs(game:GetService("ReplicatedStorage").Game.Hoverboards.Original:GetChildren()) do
                if v.Name == 'Hoverboard' then
                    v.MeshId = "rbxassetid://7859787910"
                    v.TextureID = "rbxassetid://7859787616"
                end
            end
        elseif _G.Hovers == 'Blue Flying Carpet' then
            for i,v in pairs(game:GetService("ReplicatedStorage").Game.Hoverboards.Original:GetChildren()) do
                if v.Name == 'Hoverboard' then
                    v.MeshId = "rbxassetid://7861828868"
                    v.TextureID = "rbxassetid://7861828303"
                end
            end
        elseif _G.Hovers == 'Red Flying Carpet' then
            for i,v in pairs(game:GetService("ReplicatedStorage").Game.Hoverboards.Original:GetChildren()) do
                if v.Name == 'Hoverboard' then
                    v.MeshId = "rbxassetid://7861828868"
                    v.TextureID = "rbxassetid://7861828642"
                end
            end
        end
    end
end)
Mods:Button("Unlock GamePassed", function()
    local gmppath = require(game:GetService("ReplicatedStorage").Framework.Modules.Client["5 | Gamepasses"])
    gmppath.Owns = function() return true end
end)
Mods:Button("Visual Dupe Gems", function()
    function comma_value(amount)
    local formatted = amount
	while true do  
		formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", '%1,%2')
		if (k == 0) then
		    break
	    end
	end
	return formatted
	end

	local diamonds = game.Players.LocalPlayer.PlayerGui.Main.Right.Diamonds.Amount
	local old = diamonds.Text
	local oldNumber = string.gsub(old, ",", "")
	local newNumber = oldNumber * 10
	local new = comma_value(newNumber)
	local newString = tostring(new)
	diamonds.Text = newString
end)

-----------------------------------------
-----------------------------------------
-- Settings
Config:Button("FPS Boost",function(t)
	local decalsyeeted = true -- Leaving this on makes games look shitty but the fps goes up by at least 20.
	local g = game
	local w = g.Workspace
	local l = g.Lighting
	local t = w.Terrain
	t.WaterWaveSize = 0
	t.WaterWaveSpeed = 0
	t.WaterReflectance = 0
	t.WaterTransparency = 0
	l.GlobalShadows = false
	l.FogEnd = 9e9
	l.Brightness = 0
	settings().Rendering.QualityLevel = "Level01"
	for i, v in pairs(g:GetDescendants()) do
		if v:IsA("Part") or v:IsA("Union") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then 
			v.Material = "Plastic"
			v.Reflectance = 0
		elseif v:IsA("Decal") or v:IsA("Texture") and decalsyeeted then
			v.Transparency = 1
		elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
			v.Lifetime = NumberRange.new(0)
		elseif v:IsA("Explosion") then
			v.BlastPressure = 1
			v.BlastRadius = 1
		elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") or v:IsA("Sparkles") then
			v.Enabled = false
		elseif v:IsA("MeshPart") then
			v.Material = "Plastic"
			v.Reflectance = 0
			v.TextureID = 10385902758728957
		end
	end
	for i, e in pairs(l:GetChildren()) do
		if e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") or e:IsA("BloomEffect") or e:IsA("DepthOfFieldEffect") then
			e.Enabled = false
		end
	end
end)

Config:Button("Rejoin", function()
	game:GetService("TeleportService"):Teleport(game.PlaceId, game:GetService("Players").LocalPlayer)
end)

Config:Button("Server Hop", function()
	local PlaceID = game.PlaceId
	local AllIDs = {}
	local foundAnything = ""
	local actualHour = os.date("!*t").hour
	local Deleted = false
	function TPReturner()
		local Site;
		if foundAnything == "" then
			Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
		else
			Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
		end
		local ID = ""
		if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
			foundAnything = Site.nextPageCursor
		end
		local num = 0;
		for i,v in pairs(Site.data) do
			local Possible = true
			ID = tostring(v.id)
			if tonumber(v.maxPlayers) > tonumber(v.playing) then
				for _,Existing in pairs(AllIDs) do
					if num ~= 0 then
						if ID == tostring(Existing) then
							Possible = false
						end
					else
						if tonumber(actualHour) ~= tonumber(Existing) then
							local delFile = pcall(function()
								-- delfile("NotSameServers.json")
								AllIDs = {}
								table.insert(AllIDs, actualHour)
							end)
						end
					end
					num = num + 1
				end
				if Possible == true then
					table.insert(AllIDs, ID)
					wait()
					pcall(function()
						-- writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
						wait()
						game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
					end)
					wait(.1)
				end
			end
		end
	end
	function Teleport() 
		while wait() do
			pcall(function()
				TPReturner()
				if foundAnything ~= "" then
					TPReturner()
				end
			end)
		end
	end
	Teleport()
end)

Config:Button("Teleport To Lower Server",function()
	local maxplayers, gamelink, goodserver, data_table = math.huge, "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
	if not _G.FailedServerID then _G.FailedServerID = {} end

	local function serversearch()
		data_table = game:GetService"HttpService":JSONDecode(game:HttpGetAsync(gamelink))
		for _, v in pairs(data_table.data) do
			pcall(function()
				if type(v) == "table" and v.id and v.playing and tonumber(maxplayers) > tonumber(v.playing) and not table.find(_G.FailedServerID, v.id) then
					maxplayers = v.playing
					goodserver = v.id
				end
			end)
		end
	end

	function getservers()
		pcall(serversearch)
		for i, v in pairs(data_table) do
			if i == "nextPageCursor" then
				if gamelink:find"&cursor=" then
					local a = gamelink:find"&cursor="
					local b = gamelink:sub(a)
					gamelink = gamelink:gsub(b, "")
				end
				gamelink = gamelink .. "&cursor=" .. v
				pcall(getservers)
			end
		end
	end

	pcall(getservers)
	wait()
	if goodserver == game.JobId or maxplayers == #game:GetService"Players":GetChildren() - 1 then
	end
	table.insert(_G.FailedServerID, goodserver)
	game:GetService"TeleportService":TeleportToPlaceInstance(game.PlaceId, goodserver)
end)
spawn(function()
    while wait() do
        pcall(function()
            if not game:IsLoaded() then
                game.Loaded:Wait()
            end
            game.CoreGui.RobloxPromptGui.promptOverlay.DescendantAdded:Connect(function()
                local GUI = game.CoreGui.RobloxPromptGui.promptOverlay:FindFirstChild("ErrorPrompt")
                if GUI then
                    if GUI.TitleFrame.ErrorTitle.Text == "Disconnected" then
                        if #game.Players:GetPlayers() <= 1 then
                            game.Players.LocalPlayer:Kick("\nRejoining...")
                            wait()
                            game:GetService("TeleportService"):Teleport(game.PlaceId, game.Players.LocalPlayer)
                        else
                            game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, game.Players.LocalPlayer)
                        end
                    end
                end
            end)
        end)
    end
end)
-----------------------------------------
Plyrs:Slider("Speed", 0, 500, 50, function(val)
    game:GetService('Players').LocalPlayer.Character.Humanoid.WalkSpeed = val
end)
Plyrs:Slider("Jump", 0, 1000, 50, function(val)
    game:GetService('Players').LocalPlayer.Character.Humanoid.JumpPower = val
end)
Plyrs:Slider("Fly", 0, 500, 10, function(val)
    game:GetService('Players').LocalPlayer.Character.Humanoid.HipHeight = val
end)

-----------------------------------------
-----------------------------------------
Update:Label("• BlackTrap V1.2 :")
Update:Label("  1.New UI")
Update:Label("  2.Added Time and Date")
Update:Label("  3.Added Player Info")
Update:Label("  4.Fix Slider Button")
Update:Label("• Update Date : 25/02/2022")
Credit:Button("Wanz#2020", function()
    Blacklib:Notification("Notification", "Discord ID Copied, You can paste it.")
    setclipboard('Wanz#2020')
end)
Credit:Button("Copy Link Discord", function()
    Blacklib:Notification("Notification", "Discord ID Copied, You can paste it.")
    setclipboard('https://discord.gg/n4JnsNbJ')
end)
Credit:Button("Destroy Gui", function()
    Blacklib:Notification("Description", "Thanks for using BlackTrap.")
    wait(3)
    game:GetService("CoreGui")["BlackTrap"]:Destroy()
end)

